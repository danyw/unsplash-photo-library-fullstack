{"ast":null,"code":"var P = Object.defineProperty,\n  R = Object.defineProperties;\nvar C = Object.getOwnPropertyDescriptors;\nvar m = Object.getOwnPropertySymbols;\nvar v = Object.prototype.hasOwnProperty,\n  x = Object.prototype.propertyIsEnumerable;\nvar b = (e, s, t) => s in e ? P(e, s, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[s] = t,\n  h = (e, s) => {\n    for (var t in s || (s = {})) v.call(s, t) && b(e, t, s[t]);\n    if (m) for (var t of m(s)) x.call(s, t) && b(e, t, s[t]);\n    return e;\n  },\n  p = (e, s) => R(e, C(s));\nvar g = (e, s) => {\n  var t = {};\n  for (var r in e) v.call(e, r) && s.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && m) for (var r of m(e)) s.indexOf(r) < 0 && x.call(e, r) && (t[r] = e[r]);\n  return t;\n};\nimport * as l from \"react\";\nimport * as f from \"react\";\nimport { decode as y } from \"blurhash\";\nvar o = class extends f.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.canvas = null;\n    this.handleRef = t => {\n      this.canvas = t, this.draw();\n    };\n    this.draw = () => {\n      let {\n        hash: t,\n        height: r,\n        punch: n,\n        width: a\n      } = this.props;\n      if (this.canvas) {\n        let i = y(t, a, r, n),\n          c = this.canvas.getContext(\"2d\"),\n          d = c.createImageData(a, r);\n        d.data.set(i), c.putImageData(d, 0, 0);\n      }\n    };\n  }\n  componentDidUpdate() {\n    this.draw();\n  }\n  render() {\n    let i = this.props,\n      {\n        hash: t,\n        height: r,\n        width: n\n      } = i,\n      a = g(i, [\"hash\", \"height\", \"width\"]);\n    return f.createElement(\"canvas\", p(h({}, a), {\n      height: r,\n      width: n,\n      ref: this.handleRef\n    }));\n  }\n};\no.defaultProps = {\n  height: 128,\n  width: 128\n};\nvar D = {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: \"100%\",\n    height: \"100%\"\n  },\n  u = class extends l.PureComponent {\n    componentDidUpdate() {\n      if (this.props.resolutionX <= 0) throw new Error(\"resolutionX must be larger than zero\");\n      if (this.props.resolutionY <= 0) throw new Error(\"resolutionY must be larger than zero\");\n    }\n    render() {\n      let w = this.props,\n        {\n          hash: s,\n          height: t,\n          width: r,\n          punch: n,\n          resolutionX: a,\n          resolutionY: i,\n          style: c\n        } = w,\n        d = g(w, [\"hash\", \"height\", \"width\", \"punch\", \"resolutionX\", \"resolutionY\", \"style\"]);\n      return l.createElement(\"div\", p(h({}, d), {\n        style: p(h({\n          display: \"inline-block\",\n          height: t,\n          width: r\n        }, c), {\n          position: \"relative\"\n        })\n      }), l.createElement(o, {\n        hash: s,\n        height: i,\n        width: a,\n        punch: n,\n        style: D\n      }));\n    }\n  };\nu.defaultProps = {\n  height: 128,\n  width: 128,\n  resolutionX: 32,\n  resolutionY: 32\n};\nexport { u as Blurhash, o as BlurhashCanvas };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAYA,OAAW;ACAvB,YAAYA,OAAW;AACvB,SAASC,mBAAc;AASvB,IAAqBC,IAArB,cAAkDC,eAAqB;EAAvEC;IAAA;IAME,cAA4B;IAM5B,iBAAaC,KAA8B;MACzC,KAAKA,SAASA,GACd,KAAKC,MACP;IAAA;IAEA,YAAO,MAAM;MACX,IAAM;QAAEC;QAAMC;QAAQC;QAAOC;MAAM,IAAI,KAAKC;MAE5C,IAAI,KAAKN,QAAQ;QACf,IAAMO,IAASX,EAAOM,GAAMG,GAAOF,GAAQC,CAAK;UAE1CI,IAAM,KAAKR,OAAOS,WAAW,IAAI;UACjCC,IAAYF,EAAIG,gBAAgBN,GAAOF,CAAM;QACnDO,EAAUE,KAAKC,IAAIN,CAAM,GACzBC,EAAIM,aAAaJ,GAAW,GAAG,CAAC,CAClC;MAAA;IACF;EAAA;EApBAK,qBAAqB;IACnB,KAAKd,MACP;EAAA;EAoBAe,SAAS;IACP,IAAyCC,SAAKX;MAAtC;QAAAJ;QAAMC;QAAQE;MAzC1B,IAyC6CY;MAATC,MAASD,GAAT,CAAxB,QAAM,UAAQ;IAEtB,OAAOnB,gBAAC,kBAAWoB,IAAX;MAAiBf,QAAQA;MAAQE,OAAOA;MAAOc,KAAK,KAAKC;IAAA,EAAW,CAC9E;EAAA;AACF;AAnCqBvB,EACZwB,eAAe;EACpBlB,QAAQ;EACRE,OAAO;AACT;ADEF,IAAMiB,IAAmC;IACvCC,UAAU;IACVC,KAAK;IACLC,QAAQ;IACRC,MAAM;IACNC,OAAO;IACPtB,OAAO;IACPF,QAAQ;EACV;EAEqByB,IAArB,cAA4CC,eAAqB;IAQ/Dd,qBAAqB;MACnB,IAAI,KAAKT,MAAMwB,eAAe,GAC5B,MAAM,IAAIC,MAAM,sCAAsC;MAGxD,IAAI,KAAKzB,MAAM0B,eAAe,GAC5B,MAAM,IAAID,MAAM,sCAAsC,CAE1D;IAAA;IAEAf,SAAS;MACP,IAAiFC,SAAKX;QAA9E;UAAAJ;UAAMC;UAAQE;UAAOD;UAAO0B;UAAaE;UAAaC;QA7ClE,IA6CqFhB;QAATC,MAASD,GAAT,CAAhE,QAAM,UAAQ,SAAO,SAAO,eAAa,eAAa;MAE9D,OACEY,gBAAC,eACKX,IADL;QAECe,OAAOC;UAAEC,SAAS;UAAgBhC;UAAQE;QAAAA,GAAU4B,IAA7C;UAAoDV,UAAU;QAAW;MAAA,IAEhFM,gBAAChC;QACCK,MAAMA;QACNC,QAAQ6B;QACR3B,OAAOyB;QACP1B,OAAOA;QACP6B,OAAOX;MAAAA,CACT,CACF,CAEJ;IAAA;EACF;AApCqBM,EACZP,eAAe;EACpBlB,QAAQ;EACRE,OAAO;EACPyB,aAAa;EACbE,aAAa;AACf;AAAA","names":["React","decode","BlurhashCanvas","f","constructor","canvas","draw","hash","height","punch","width","props","pixels","ctx","getContext","imageData","createImageData","data","set","putImageData","componentDidUpdate","render","_a","rest","ref","handleRef","defaultProps","canvasStyle","position","top","bottom","left","right","Blurhash","l","resolutionX","Error","resolutionY","style","__spreadProps","display"],"sources":["C:\\WebDevClasses\\Databases\\Unsplash-FullStack\\client\\node_modules\\react-blurhash\\src\\Blurhash.tsx","C:\\WebDevClasses\\Databases\\Unsplash-FullStack\\client\\node_modules\\react-blurhash\\src\\BlurhashCanvas.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport BlurhashCanvas from './BlurhashCanvas';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  hash: string;\n  /** CSS height, default: 128 */\n  height?: number | string | 'auto';\n  punch?: number;\n  resolutionX?: number;\n  resolutionY?: number;\n  style?: React.CSSProperties;\n  /** CSS width, default: 128 */\n  width?: number | string | 'auto';\n};\n\nconst canvasStyle: React.CSSProperties = {\n  position: 'absolute',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  width: '100%',\n  height: '100%',\n};\n\nexport default class Blurhash extends React.PureComponent<Props> {\n  static defaultProps = {\n    height: 128,\n    width: 128,\n    resolutionX: 32,\n    resolutionY: 32,\n  };\n\n  componentDidUpdate() {\n    if (this.props.resolutionX <= 0) {\n      throw new Error('resolutionX must be larger than zero');\n    }\n\n    if (this.props.resolutionY <= 0) {\n      throw new Error('resolutionY must be larger than zero');\n    }\n  }\n\n  render() {\n    const { hash, height, width, punch, resolutionX, resolutionY, style, ...rest } = this.props;\n\n    return (\n      <div\n        {...rest}\n        style={{ display: 'inline-block', height, width, ...style, position: 'relative' }}\n      >\n        <BlurhashCanvas\n          hash={hash}\n          height={resolutionY}\n          width={resolutionX}\n          punch={punch}\n          style={canvasStyle}\n        />\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { decode } from 'blurhash';\n\nexport type Props = React.CanvasHTMLAttributes<HTMLCanvasElement> & {\n  hash: string;\n  height?: number;\n  punch?: number;\n  width?: number;\n};\n\nexport default class BlurhashCanvas extends React.PureComponent<Props> {\n  static defaultProps = {\n    height: 128,\n    width: 128,\n  };\n\n  canvas: HTMLCanvasElement = null;\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  handleRef = (canvas: HTMLCanvasElement) => {\n    this.canvas = canvas;\n    this.draw();\n  };\n\n  draw = () => {\n    const { hash, height, punch, width } = this.props;\n\n    if (this.canvas) {\n      const pixels = decode(hash, width, height, punch);\n\n      const ctx = this.canvas.getContext('2d');\n      const imageData = ctx.createImageData(width, height);\n      imageData.data.set(pixels);\n      ctx.putImageData(imageData, 0, 0);\n    }\n  };\n\n  render() {\n    const { hash, height, width, ...rest } = this.props;\n\n    return <canvas {...rest} height={height} width={width} ref={this.handleRef} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}