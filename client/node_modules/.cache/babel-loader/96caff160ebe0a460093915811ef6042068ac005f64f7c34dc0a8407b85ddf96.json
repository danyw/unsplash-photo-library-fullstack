{"ast":null,"code":"const digit = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~';\nconst decode83 = (str, start, end) => {\n  let value = 0;\n  while (start < end) {\n    value *= 83;\n    value += digit.indexOf(str[start++]);\n  }\n  return value;\n};\nconst pow = Math.pow;\nconst PI = Math.PI;\nconst PI2 = PI * 2;\nconst d = 3294.6;\nconst e = 269.025;\nconst sRGBToLinear = value => value > 10.31475 ? pow(value / e + 0.052132, 2.4) : value / d;\nconst linearTosRGB = v => ~~(v > 0.00001227 ? e * pow(v, 0.416666) - 13.025 : v * d + 1);\nconst signSqr = x => (x < 0 ? -1 : 1) * x * x;\n\n/**\n * Fast approximate cosine implementation\n * Based on FTrig https://github.com/netcell/FTrig\n */\nconst fastCos = x => {\n  x += PI / 2;\n  while (x > PI) {\n    x -= PI2;\n  }\n  const cos = 1.27323954 * x - 0.405284735 * signSqr(x);\n  return 0.225 * (signSqr(cos) - cos) + cos;\n};\n\n/**\n * Extracts average color from BlurHash image\n * @param {string} blurHash BlurHash image string\n * @returns {[number, number, number]}\n */\nexport function getBlurHashAverageColor(blurHash) {\n  const val = decode83(blurHash, 2, 6);\n  return [val >> 16, val >> 8 & 255, val & 255];\n}\n\n/**\n * Decodes BlurHash image\n * @param {string} blurHash BlurHash image string\n * @param {number} width Output image width\n * @param {number} height Output image height\n * @param {?number} punch\n * @returns {Uint8ClampedArray}\n */\nexport function decodeBlurHash(blurHash, width, height, punch) {\n  const sizeFlag = decode83(blurHash, 0, 1);\n  const numX = sizeFlag % 9 + 1;\n  const numY = ~~(sizeFlag / 9) + 1;\n  const size = numX * numY;\n  let i = 0,\n    j = 0,\n    x = 0,\n    y = 0,\n    r = 0,\n    g = 0,\n    b = 0,\n    basis = 0,\n    basisY = 0,\n    colorIndex = 0,\n    pixelIndex = 0,\n    yh = 0,\n    xw = 0,\n    value = 0;\n  const maximumValue = (decode83(blurHash, 1, 2) + 1) / 13446 * (punch | 1);\n  const colors = new Float64Array(size * 3);\n  const averageColor = getBlurHashAverageColor(blurHash);\n  for (i = 0; i < 3; i++) {\n    colors[i] = sRGBToLinear(averageColor[i]);\n  }\n  for (i = 1; i < size; i++) {\n    value = decode83(blurHash, 4 + i * 2, 6 + i * 2);\n    colors[i * 3] = signSqr(~~(value / (19 * 19)) - 9) * maximumValue;\n    colors[i * 3 + 1] = signSqr(~~(value / 19) % 19 - 9) * maximumValue;\n    colors[i * 3 + 2] = signSqr(value % 19 - 9) * maximumValue;\n  }\n  const bytesPerRow = width * 4;\n  const pixels = new Uint8ClampedArray(bytesPerRow * height);\n  for (y = 0; y < height; y++) {\n    yh = PI * y / height;\n    for (x = 0; x < width; x++) {\n      r = 0;\n      g = 0;\n      b = 0;\n      xw = PI * x / width;\n      for (j = 0; j < numY; j++) {\n        basisY = fastCos(yh * j);\n        for (i = 0; i < numX; i++) {\n          basis = fastCos(xw * i) * basisY;\n          colorIndex = (i + j * numX) * 3;\n          r += colors[colorIndex] * basis;\n          g += colors[colorIndex + 1] * basis;\n          b += colors[colorIndex + 2] * basis;\n        }\n      }\n      pixelIndex = 4 * x + y * bytesPerRow;\n      pixels[pixelIndex] = linearTosRGB(r);\n      pixels[pixelIndex + 1] = linearTosRGB(g);\n      pixels[pixelIndex + 2] = linearTosRGB(b);\n      pixels[pixelIndex + 3] = 255; // alpha\n    }\n  }\n\n  return pixels;\n}","map":{"version":3,"names":["digit","decode83","str","start","end","value","indexOf","pow","Math","PI","PI2","d","e","sRGBToLinear","linearTosRGB","v","signSqr","x","fastCos","cos","getBlurHashAverageColor","blurHash","val","decodeBlurHash","width","height","punch","sizeFlag","numX","numY","size","i","j","y","r","g","b","basis","basisY","colorIndex","pixelIndex","yh","xw","maximumValue","colors","Float64Array","averageColor","bytesPerRow","pixels","Uint8ClampedArray"],"sources":["C:/WebDevClasses/Databases/Unsplash-FullStack/client/node_modules/fast-blurhash/index.js"],"sourcesContent":["const digit =\n    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~';\nconst decode83 = (str, start, end) => {\n    let value = 0;\n    while (start < end) {\n        value *= 83;\n        value += digit.indexOf(str[start++]);\n    }\n    return value;\n};\n\nconst pow = Math.pow;\nconst PI = Math.PI;\nconst PI2 = PI * 2;\n\nconst d = 3294.6;\nconst e = 269.025;\nconst sRGBToLinear = (value) =>\n    value > 10.31475 ? pow(value / e + 0.052132, 2.4) : value / d;\n\nconst linearTosRGB = (v) =>\n    ~~(v > 0.00001227 ? e * pow(v, 0.416666) - 13.025 : v * d + 1);\n\nconst signSqr = (x) => (x < 0 ? -1 : 1) * x * x;\n\n/**\n * Fast approximate cosine implementation\n * Based on FTrig https://github.com/netcell/FTrig\n */\nconst fastCos = (x) => {\n    x += PI / 2;\n    while (x > PI) {\n        x -= PI2;\n    }\n    const cos = 1.27323954 * x - 0.405284735 * signSqr(x);\n    return 0.225 * (signSqr(cos) - cos) + cos;\n};\n\n/**\n * Extracts average color from BlurHash image\n * @param {string} blurHash BlurHash image string\n * @returns {[number, number, number]}\n */\nexport function getBlurHashAverageColor(blurHash) {\n    const val = decode83(blurHash, 2, 6);\n    return [val >> 16, (val >> 8) & 255, val & 255];\n}\n\n/**\n * Decodes BlurHash image\n * @param {string} blurHash BlurHash image string\n * @param {number} width Output image width\n * @param {number} height Output image height\n * @param {?number} punch\n * @returns {Uint8ClampedArray}\n */\nexport function decodeBlurHash(blurHash, width, height, punch) {\n    const sizeFlag = decode83(blurHash, 0, 1);\n    const numX = (sizeFlag % 9) + 1;\n    const numY = ~~(sizeFlag / 9) + 1;\n    const size = numX * numY;\n\n    let i = 0,\n        j = 0,\n        x = 0,\n        y = 0,\n        r = 0,\n        g = 0,\n        b = 0,\n        basis = 0,\n        basisY = 0,\n        colorIndex = 0,\n        pixelIndex = 0,\n        yh = 0,\n        xw = 0,\n        value = 0;\n\n    const maximumValue = ((decode83(blurHash, 1, 2) + 1) / 13446) * (punch | 1);\n\n    const colors = new Float64Array(size * 3);\n\n    const averageColor = getBlurHashAverageColor(blurHash);\n    for (i = 0; i < 3; i++) {\n        colors[i] = sRGBToLinear(averageColor[i]);\n    }\n\n    for (i = 1; i < size; i++) {\n        value = decode83(blurHash, 4 + i * 2, 6 + i * 2);\n        colors[i * 3] = signSqr(~~(value / (19 * 19)) - 9) * maximumValue;\n        colors[i * 3 + 1] = signSqr((~~(value / 19) % 19) - 9) * maximumValue;\n        colors[i * 3 + 2] = signSqr((value % 19) - 9) * maximumValue;\n    }\n\n    const bytesPerRow = width * 4;\n    const pixels = new Uint8ClampedArray(bytesPerRow * height);\n\n    for (y = 0; y < height; y++) {\n        yh = (PI * y) / height;\n        for (x = 0; x < width; x++) {\n            r = 0;\n            g = 0;\n            b = 0;\n            xw = (PI * x) / width;\n\n            for (j = 0; j < numY; j++) {\n                basisY = fastCos(yh * j);\n                for (i = 0; i < numX; i++) {\n                    basis = fastCos(xw * i) * basisY;\n                    colorIndex = (i + j * numX) * 3;\n                    r += colors[colorIndex] * basis;\n                    g += colors[colorIndex + 1] * basis;\n                    b += colors[colorIndex + 2] * basis;\n                }\n            }\n\n            pixelIndex = 4 * x + y * bytesPerRow;\n            pixels[pixelIndex] = linearTosRGB(r);\n            pixels[pixelIndex + 1] = linearTosRGB(g);\n            pixels[pixelIndex + 2] = linearTosRGB(b);\n            pixels[pixelIndex + 3] = 255; // alpha\n        }\n    }\n    return pixels;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}